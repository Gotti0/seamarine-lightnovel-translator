import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import os
import threading
import asyncio
from epub_processor import translate_epub_async
from google import genai

class TranslatorGUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Sea Marine EPUB Translator")
        self.geometry("600x550")
        self.input_path = None
        self.output_path = None
        
        # API 키 입력
        self.api_key_label = tk.Label(self, text="API Key:")
        self.api_key_label.pack(pady=5)
        self.api_key_entry = tk.Entry(self, width=50, show="*")
        self.api_key_entry.pack(pady=5)
        
        # 최대 동시 요청 수 설정
        self.concurrent_label = tk.Label(self, text="Max Concurrent Requests (1-10):")
        self.concurrent_label.pack(pady=5)
        self.concurrent_spinbox = tk.Spinbox(self, from_=1, to=20, width=5)
        self.concurrent_spinbox.delete(0, tk.END)
        self.concurrent_spinbox.insert(0, "1")
        self.concurrent_spinbox.pack(pady=5)
        
        # EPUB 파일 선택 버튼
        self.select_button = tk.Button(self, text="Select Epub File", command=self.select_file)
        self.select_button.pack(pady=10)
        self.file_label = tk.Label(self, text="Selected File: None")
        self.file_label.pack()
        
        # 번역 시작 버튼
        self.translate_button = tk.Button(self, text="Start Translation", command=self.start_translation, state=tk.DISABLED)
        self.translate_button.pack(pady=10)
        
        # 진행 상황 표시용 텍스트 박스
        self.log_text = tk.Text(self, height=10)
        self.log_text.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
        
        # 진행바
        self.progress = ttk.Progressbar(self, orient="horizontal", mode="indeterminate")
        self.progress.pack(fill=tk.X, padx=10, pady=5)
    
    def select_file(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("EPUB Files", "*.epub"), ("All Files", "*.*")]
        )
        if file_path:
            self.input_path = file_path
            self.file_label.config(text=f"Selected File: {os.path.basename(file_path)}")
            self.translate_button.config(state=tk.NORMAL)
    
    def start_translation(self):
        if not self.input_path:
            messagebox.showwarning("WARNING", "Please select an EPUB file first!")
            return
        api_key = self.api_key_entry.get().strip()
        if not api_key:
            messagebox.showwarning("WARNING", "Please enter your API key!")
            return
        try:
            max_concurrent = int(self.concurrent_spinbox.get())
            if max_concurrent < 1:
                raise ValueError
        except ValueError:
            messagebox.showwarning("WARNING", "Invalid concurrent requests value.")
            return
        
        dir_name = os.path.dirname(self.input_path)
        base_name = os.path.splitext(os.path.basename(self.input_path))[0]
        self.output_path = os.path.join(dir_name, base_name + "_translated.epub")
        
        self.translate_button.config(state=tk.DISABLED)
        self.select_button.config(state=tk.DISABLED)
        self.log_text.insert(tk.END, "Starting translation...\n")
        self.progress.start(10)
        
        threading.Thread(target=self.run_translation, args=(max_concurrent,), daemon=True).start()
    
    def run_translation(self, max_concurrent):
        try:
            api_key = self.api_key_entry.get().strip()
            global client
            client = genai.Client(api_key=api_key)
            import translator_core
            translator_core.set_client(client)
            asyncio.run(translate_epub_async(self.input_path, self.output_path, max_concurrent))
            self.log_text.insert(tk.END, f"Translation completed! File: {self.output_path}\n")
        except Exception as e:
            self.log_text.insert(tk.END, f"An error occurred during translation: {e}\n")
        finally:
            self.progress.stop()
            self.translate_button.config(state=tk.NORMAL)
            self.select_button.config(state=tk.NORMAL)
