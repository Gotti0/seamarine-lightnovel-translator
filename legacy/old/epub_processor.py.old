import asyncio
import uuid
from ebooklib import epub
from ebooklib.epub import EpubHtml
from bs4 import BeautifulSoup
from translator_core import translate_chunk_with_html, translate_chapter_async

def translate_text(text, chapter_index=0, chunk_index=0):
    html_fragment = f"<div>{text}</div>"
    translated_html = translate_chunk_with_html(html_fragment, chapter_index, chunk_index)
    soup = BeautifulSoup(translated_html, "html.parser")
    return soup.get_text()

def translate_toc_entry(entry, chapter_index=0, chunk_index=0):
    if hasattr(entry, 'title'):
        entry.title = translate_text(entry.title, chapter_index, chunk_index)
        return entry
    elif isinstance(entry, tuple) and len(entry) == 2:
        link, subitems = entry
        link.title = translate_text(link.title, chapter_index, chunk_index)
        new_subitems = [translate_toc_entry(sub, chapter_index, chunk_index) for sub in subitems]
        return (link, new_subitems)
    else:
        return entry

async def translate_epub_async(input_path, output_path, max_concurrent_requests):
    book = epub.read_epub(input_path)
    translated_book = epub.EpubBook()

    # 복사: 모든 아이템을 그대로 추가
    for item in book.get_items():
        new_item = epub.EpubItem(
            uid=item.get_id(),
            file_name=item.file_name,
            media_type=item.media_type,
            content=item.content
        )
        translated_book.add_item(new_item)

    translated_book.set_identifier(f'{uuid.uuid4()}')    

    # 책 제목 번역
    metadata_title = book.get_metadata('DC', 'title')
    if metadata_title:
        original_title = metadata_title[0][0]
        translated_title = translate_text(original_title, chapter_index=0, chunk_index=0)
        translated_book.set_title(translated_title)

    translated_book.set_language('ko')

    # 커버 및 저자 설정
    cover = book.get_item_with_id('cover')
    if cover:
        translated_book.set_cover(cover.file_name, cover.content)
    creators = book.get_metadata('DC', 'creator')
    for creator in creators:
        translated_book.add_author(creator[0])
    translated_book.add_metadata('DC', 'contributor', 'SeaMarine')

    # 목차와 spine은 원본 그대로 설정
    translated_book.toc = book.toc
    translated_book.spine = book.spine

    epub.write_epub(output_path, translated_book)
    translated_book = epub.read_epub(output_path)
    translated_book.toc = [translate_toc_entry(entry, chapter_index=0, chunk_index=0) for entry in translated_book.toc]
    
    chapter_items = [item for item in translated_book.get_items() if isinstance(item, EpubHtml)]

    # 비동기 번역을 위한 준비
    from concurrent.futures import ThreadPoolExecutor
    semaphore = asyncio.Semaphore(max_concurrent_requests)
    executor = ThreadPoolExecutor(max_concurrent_requests)
    
    tasks = []
    for idx, item in enumerate(chapter_items):
        html = item.get_content().decode('utf-8')
        tasks.append(translate_chapter_async(html, idx + 1, executor, semaphore))
    
    translated_results = await asyncio.gather(*tasks)
    for item, translated_html in zip(chapter_items, translated_results):
        item.set_content(translated_html.encode('utf-8'))
    
    epub.write_epub(output_path, translated_book)
    return output_path
