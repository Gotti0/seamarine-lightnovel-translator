import asyncio
import time
import copy
from bs4 import BeautifulSoup, NavigableString, Tag
from google import genai

max_chunk_size = 3000
llm_model = 'gemini-2.0-flash'
custom_prompt = ''
MAX_RETRIES = 3

def set_client(client_instance):
    global client
    client = client_instance


def chunk_body_preserving_structure(body, max_chars=max_chunk_size):
    chunks = []
    current_chunk = BeautifulSoup("<div></div>", "html.parser").div
    for element in list(body.contents):
        element_str = str(element)
        if len(str(current_chunk)) + len(element_str) > max_chars:
            if current_chunk.contents:
                chunks.append(copy.copy(current_chunk))
                current_chunk.clear()
            if len(element_str) > max_chars:
                if isinstance(element, NavigableString):
                    text = str(element)
                    for i in range(0, len(text), max_chars):
                        new_tag = BeautifulSoup("<div></div>", "html.parser").div
                        new_tag.append(text[i:i+max_chars])
                        chunks.append(new_tag)
                elif isinstance(element, Tag):
                    temp_tag = element.__copy__()
                    temp_tag.clear()
                    for child in list(element.contents):
                        child_str = str(child)
                        if len(str(temp_tag)) + len(child_str) > max_chars:
                            if temp_tag.contents:
                                chunks.append(temp_tag)
                                temp_tag = element.__copy__()
                                temp_tag.clear()
                        temp_tag.append(child)
                    if temp_tag.contents:
                        chunks.append(temp_tag)
                else:
                    chunks.append(element)
            else:
                current_chunk.append(element)
        else:
            current_chunk.append(element)
    if current_chunk.contents:
        chunks.append(copy.copy(current_chunk))
    return chunks

def clean_gemini_response(response_text: str) -> str:
    text = response_text.strip()
    if text.startswith("```html"):
        text = text[7:].strip()
    elif text.startswith("```"):
        text = text[3:].strip()
    if text.endswith("```"):
        text = text[:-3].strip()
    return text

def translate_chunk_with_html(html_fragment, chapter_index, chunk_index):
    prompt = (
        "**Important:** Do NOT include any comments or explanations in your output. Only return the translated result.\n\n"
        "You are a professional Japanese-to-Korean translator who specializes in translating Japanese light novels with accuracy, fluency, and emotional nuance.\n"
        "Translate the following HTML content from Japanese into natural Korean, suitable for publication in an officially localized light novel. Maintain the tone, dialogue, and literary nuance. Use fluent and immersive Korean that feels professionally written.\n"
        "You're translating Japanese light novels. Follow these strict guidelines:\n\n"
        "⚠️ Strict Instructions:\n"
        "- Only translate visible Japanese text.\n"
        "- NEVER remove or modify any HTML tags, structure, or attributes (like <p>, <img>, class names, etc.)\n"
        "- Do NOT translate file paths, image `alt`, `href`, class names, or non-visible metadata.\n"
        "- NEVER include Japanese characters in your respond\n"
        "- If there is no Japanese text, return the input HTML unchanged.\n"
        "- ❗ Only respond with raw HTML.\n"
        "- Do NOT include explanations, comments, markdown code blocks, or any extra content.\n\n"
        "Now translate:\n\n"
        "### html\n" + html_fragment
    )
    try:
        response = client.models.generate_content(
            model=llm_model,
            contents=prompt
        )
        output = response.text.strip()
        output = clean_gemini_response(output)
        if not output or "<" not in output:
            raise ValueError("Empty or non-HTML response from Gemini")
        return output
    except Exception as e:
        print("Gemini error Retrying(1):", e)
        time.sleep(5.0)
        try:
            response = client.models.generate_content(
                model=llm_model,
                contents=prompt
            )
            output = response.text.strip()
            output = clean_gemini_response(output)
            if not output or "<" not in output:
                raise ValueError("Empty or non-HTML response from Gemini")
            return output
        except Exception as e:
            print("Gemini error Retrying(2):", e)
            time.sleep(15.0)
            try:
                response = client.models.generate_content(
                    model=llm_model,
                    contents=prompt
                )
                output = response.text.strip()
                output = clean_gemini_response(output)
                if not output or "<" not in output:
                    raise ValueError("Empty or non-HTML response from Gemini")
                return output
            except Exception as e:
                print("Gemini error Retrying:", e)
                return html_fragment

async def async_translate_chunk(html_fragment, chapter_index, chunk_index, semaphore, executor):
    for attempt in range(1, MAX_RETRIES + 1):
        async with semaphore:
            try:
                loop = asyncio.get_running_loop()
                result = await loop.run_in_executor(
                    executor, 
                    translate_chunk_with_html, 
                    html_fragment, 
                    chapter_index, 
                    chunk_index
                )
                return result
            except Exception as e:
                print(f"[{chapter_index}-{chunk_index}] Error on attempt {attempt}: {e}")
                await asyncio.sleep(5 * attempt)
    print(f"[{chapter_index}-{chunk_index}] Final failure. Returning original fragment.")
    return html_fragment

async def translate_chapter_async(html, chapter_index, executor, semaphore):
    soup = BeautifulSoup(html, 'html.parser')
    head = soup.head
    body = soup.body if soup.body else soup
    chunks = chunk_body_preserving_structure(body)
    tasks = []
    for chunk_index, chunk in enumerate(chunks):
        html_fragment = str(chunk)
        tasks.append(async_translate_chunk(html_fragment, chapter_index, chunk_index, semaphore, executor))
    translated_chunks = await asyncio.gather(*tasks)
    new_soup = BeautifulSoup("", "html.parser")
    html_tag = new_soup.new_tag("html")
    new_soup.append(html_tag)
    if head:
        html_tag.append(copy.copy(head))
    new_body = new_soup.new_tag("body")
    for translated_chunk in translated_chunks:
        chunk_soup = BeautifulSoup(translated_chunk, "html.parser")
        for content in list(chunk_soup.contents):
            new_body.append(content)
    html_tag.append(new_body)
    return str(new_soup)
